;####################################################
; DO NOT MODIFY: File created from src/PLC20_fswitch_main.psub
;####################################################







;FSWITCH DUAL ACTUATOR MAIN PLC
;Description:
;This PLC is the main control for the dual drive F switch. This is the main interface for EPICS. This PLC
;takes 8 p-variables representing the desired state of the filters and 2 additional p-variables that disable
;either actuator, reverting the system back to a single drive system in the event of a failure. 
;
;This PLC commands the two actuator PLCs and has no direct interaction with the axes, it simply passes a
;filter and the desired state of that filter to each of the actuator PLCs and enables them.
;
;In order to run this PLC the demand input must be configured and the PLC enabled. The PLC will disable once
;it's finished fufilling the demand.
;
;INPUTS:	FILTER_BANK_X_DEMAND -	8 x 16bit p-variables representing the required state of the filters	P(100*PLC_NO + 10) - P(100*PLC_NO + 17)
;			ACTUATOR_A_DISABLED	 -	1 to disable actuator A, 0 to leave it enabled	P(100*PLC_NO + 81)
;			ACTUATOR_B_DISABLED	 -	1 to disable actuator B, 0 to leave it enabled	P(100*PLC_NO + 82)
;			RUNNING				 -	-2 to reset all filters, otherwise no interaction needed
;
;OUTPUTS:	ACTUATOR_A_TARGET	 -	The target for actuator A 0-127		P(100*(ACTUATOR_A_PLC_NO) + 2)
;			ACTUATOR_B_TARGET	 -	The target for actuator B 0-127		P(100*(ACTUATOR_B_PLC_NO) + 2)
;			ACTUATOR_TAGET_STATE -	The desired state of actuator A		P(100*(ACTUATOR_A_PLC_NO) + 3)
;			ACTUATOR_TAGET_STATE -	The desired state of actuator B		P(100*(ACTUATOR_B_PLC_NO) + 3)
;
;Assumptions and conventions:
;Filters	0-127
;Banks		0-7
;In Beam = 1
;Out beam = 0

; Macros (and example values):
; - MAIN_PLC_NO 	    = 20  PLC Number for the main PLC, e.g 20
; - ACTA_PLC_NO		    = 22  PLC Number for Actuator A PLC, e.g 22
; - ACTB_PLC_NO		    = 23  PLC Number for Actuator B PLC, e.g 23
; - ACTUATOR_A_DISABLED = 0  Flag to disable Actuator A, eg 0 for enabled
; - ACTUATOR_B_DISABLED = 1  Flag to disable Actuator B, eg 0 for enabled

			
CLOSE
DELETE GATHER
DELETE TRACE

#DEFINE PLC_NO	20
#DEFINE ACTUATOR_A_PLC_NO	22
#DEFINE ACTUATOR_B_PLC_NO	23
;Macros {

;TIMER
#DEFINE TIMER I(5111+(PLC_NO&30)*50+PLC_NO%2)
#DEFINE MILLISECONDS	* 8388608/i10

;TO IMPLEMENT FOR EPICS
#DEFINE STATUS	P(100*PLC_NO + 1)
#DEFINE HOME_ON_BATCH	P(100*PLC_NO + 84)

#DEFINE RUNNING	P(100*PLC_NO + 5)
#DEFINE TIMEOUT	P(100*PLC_NO + 8)
#DEFINE CORRUPT	P(100*PLC_NO + 9)

; Demand, In progress, Status and Diff data { 
#DEFINE FILTER_BANK_0_DEMAND	P(100*PLC_NO + 10)
#DEFINE FILTER_BANK_1_DEMAND	P(100*PLC_NO + 11)
#DEFINE FILTER_BANK_2_DEMAND	P(100*PLC_NO + 12)
#DEFINE FILTER_BANK_3_DEMAND	P(100*PLC_NO + 13)
#DEFINE FILTER_BANK_4_DEMAND	P(100*PLC_NO + 14)
#DEFINE FILTER_BANK_5_DEMAND	P(100*PLC_NO + 15)
#DEFINE FILTER_BANK_6_DEMAND	P(100*PLC_NO + 16)
#DEFINE FILTER_BANK_7_DEMAND	P(100*PLC_NO + 17)
#DEFINE FILTER_BANK_DEMAND_ITER 	P(100*PLC_NO + 10 + ITERATOR)

#DEFINE FILTER_BANK_0_IN_PROG	P(100*PLC_NO + 20)
#DEFINE FILTER_BANK_1_IN_PROG	P(100*PLC_NO + 21)
#DEFINE FILTER_BANK_2_IN_PROG	P(100*PLC_NO + 22)
#DEFINE FILTER_BANK_3_IN_PROG	P(100*PLC_NO + 23)
#DEFINE FILTER_BANK_4_IN_PROG	P(100*PLC_NO + 24)
#DEFINE FILTER_BANK_5_IN_PROG	P(100*PLC_NO + 25)
#DEFINE FILTER_BANK_6_IN_PROG	P(100*PLC_NO + 26)
#DEFINE FILTER_BANK_7_IN_PROG	P(100*PLC_NO + 27)
#DEFINE FILTER_BANK_IN_PROG_ITER 	P(100*PLC_NO + 20 + ITERATOR)


#DEFINE FILTER_BANK_0_STATUS	P(100*PLC_NO + 30)
#DEFINE FILTER_BANK_1_STATUS	P(100*PLC_NO + 31)
#DEFINE FILTER_BANK_2_STATUS	P(100*PLC_NO + 32)
#DEFINE FILTER_BANK_3_STATUS	P(100*PLC_NO + 33)
#DEFINE FILTER_BANK_4_STATUS	P(100*PLC_NO + 34)
#DEFINE FILTER_BANK_5_STATUS	P(100*PLC_NO + 35)
#DEFINE FILTER_BANK_6_STATUS	P(100*PLC_NO + 36)
#DEFINE FILTER_BANK_7_STATUS	P(100*PLC_NO + 37)
#DEFINE FILTER_BANK_STATUS_ITER 	P(100*PLC_NO + 30 + ITERATOR)

#DEFINE FILTER_BANK_0_DIFF		P(100*PLC_NO + 40)
#DEFINE FILTER_BANK_1_DIFF		P(100*PLC_NO + 41)
#DEFINE FILTER_BANK_2_DIFF		P(100*PLC_NO + 42)
#DEFINE FILTER_BANK_3_DIFF		P(100*PLC_NO + 43)
#DEFINE FILTER_BANK_4_DIFF		P(100*PLC_NO + 44)
#DEFINE FILTER_BANK_5_DIFF		P(100*PLC_NO + 45)
#DEFINE FILTER_BANK_6_DIFF		P(100*PLC_NO + 46)
#DEFINE FILTER_BANK_7_DIFF		P(100*PLC_NO + 47)
#DEFINE FILTER_BANK_DIFF_STORE		P(100*PLC_NO + 48)
#DEFINE FILTER_BANK_DIFF_ITER 	P(100*PLC_NO + 40 + ITERATOR)
;}
#DEFINE ITERATOR	P(100*PLC_NO + 48)

#DEFINE MOST_SIGNIFICANT_FILTER	P(100*PLC_NO + 50)
#DEFINE MOST_SIGNIFICANT_BANK	P(100*PLC_NO + 51)
#DEFINE MOST_SIGNIFICANT_FILTER_DEC	INT((EXP(INT((MOST_SIGNIFICANT_FILTER%16))*LN(2)))+0.1)

#DEFINE LEAST_SIGNIFICANT_FILTER	P(100*PLC_NO + 55)
#DEFINE LEAST_SIGNIFICANT_BANK		P(100*PLC_NO + 56)
#DEFINE LEAST_SIGNIFICANT_FILTER_DEC	INT((EXP(INT((LEAST_SIGNIFICANT_FILTER%16))*LN(2)))+0.1)

#DEFINE ACTUATOR		P(100*PLC_NO + 60)
#DEFINE ACTUATOR_PLC_DONE	P(100*(ACTUATOR_A_PLC_NO+(ACTUATOR-1)) + 1)
#DEFINE ACTUATOR_PLC_TIMED_OUT	P(100*(ACTUATOR_A_PLC_NO+(ACTUATOR-1)) + 11)
#DEFINE ACTUATOR_TARGET		P(100*(ACTUATOR_A_PLC_NO+(ACTUATOR-1)) +2)
#DEFINE ACTUATOR_TARGET_DEC		INT((EXP(INT((ACTUATOR_TARGET%16))*LN(2)))+0.1)
#DEFINE ACTUATOR_TAGET_STATE	P(100*(ACTUATOR_A_PLC_NO+(ACTUATOR-1))  + 3)
#DEFINE ACTUATOR_POS		P(100*(ACTUATOR_A_PLC_NO+(ACTUATOR-1))  + 4)


#DEFINE ACTUATOR_A_TARGET	P(100*(ACTUATOR_A_PLC_NO) + 2)
#DEFINE ACTUATOR_B_TARGET	P(100*(ACTUATOR_B_PLC_NO) + 2)
#DEFINE ACTUATOR_A_POS		P(100*(ACTUATOR_A_PLC_NO) + 4)
#DEFINE ACTUATOR_B_POS		P(100*(ACTUATOR_B_PLC_NO) + 4)

#DEFINE CURRENT_BANK	INT(ACTUATOR_TARGET/16)
#DEFINE CURRENT_FILTER_BANK_IN_PROG 	P(100*PLC_NO + (20 + CURRENT_BANK))
#DEFINE CURRENT_FILTER_BANK_DEMAND 	P(100*PLC_NO + (10 + CURRENT_BANK))
#DEFINE CURRENT_FILTER_BANK_DIFF	P(100*PLC_NO + (40 + CURRENT_BANK))

#DEFINE ACTUATOR_FULLY_COMPLETED		P(100*PLC_NO + (60+ACTUATOR)) ;61 AND 62
#DEFINE ACTUATOR_A_COMPLETED	P(100*PLC_NO + 61)
#DEFINE ACTUATOR_B_COMPLETED	P(100*PLC_NO + 62)
#DEFINE ACTUATOR_PROGRESSOR		P(100*PLC_NO + (65+ACTUATOR)) ;66 AND 67

#DEFINE IN_PROGRESS		P(100*PLC_NO + 70)
#DEFINE ACTUATION_REQUIRED	P(100*PLC_NO + 71)

#DEFINE ACTUATOR_PLC_NO	(ACTUATOR_A_PLC_NO + (ACTUATOR-1))
#DEFINE RUN_ACTUATOR_PLC	M(5000 + ACTUATOR_PLC_NO)
#DEFINE RUN_THIS_PLC	M(5000 + PLC_NO)

#DEFINE ALGORITHM	P(100*PLC_NO + 72)
#DEFINE ALGORITHM_DEC	INT((EXP(INT((ALGORITHM%16))*LN(2)))+0.1)
#DEFINE ALGORITHM_DETAIL	P(100*PLC_NO + 73)

#DEFINE NO_OF_ACTUATIONS	P(100*PLC_NO + 74)
#DEFINE INDEX	P(100*PLC_NO + 75)
#DEFINE INDEX_DEC	INT((EXP(INT((INDEX%16))*LN(2)))+0.1)
#DEFINE CENTER_OF_ACTUATIONS	P(100*PLC_NO + 76)


#DEFINE ACTUATOR_DISABLED		P(100*PLC_NO + (80+ACTUATOR)) ;81 AND 82
#DEFINE ACTUATOR_A_DISABLED		P(100*PLC_NO + 81) 
#DEFINE ACTUATOR_B_DISABLED		P(100*PLC_NO + 82)
#DEFINE RESET_IN_PROGRESS		P(100*PLC_NO + 83) 
#DEFINE PROGRAM_POSITION		P(100*PLC_NO + 85)
#DEFINE ACTUATIONS_DURING_RESET		P(100*PLC_NO + 86)


#DEFINE RESET_IN_PROG_SBIT		1
#DEFINE ALG1_SBIT		2
#DEFINE ALG2_SBIT		4
#DEFINE ALG3_SBIT		8
#DEFINE ALG4_SBIT		16
#DEFINE ACT1_COMP_SBIT		32
#DEFINE ACT2_COMP_SBIT		64
#DEFINE ACT1_PLC_TRIGGERED_SBIT		128
#DEFINE ACT2_PLC_TRIGGERED_SBIT		256
#DEFINE DONE_SBIT	512

ACTUATOR_A_DISABLED = 0
ACTUATOR_B_DISABLED = 1

;}


OPEN PLC PLC_NO
CLEAR
STATUS = 0
PROGRAM_POSITION = 0
ACTUATIONS_DURING_RESET = 0
IF(RUNNING = -2)
	PROGRAM_POSITION = 1
	RESET_IN_PROGRESS = 1
	CORRUPT = 1
	STATUS = STATUS | RESET_IN_PROG_SBIT
	ITERATOR = 0
	WHILE(ITERATOR < 8)
		FILTER_BANK_DIFF_ITER = 65535
		ITERATOR = ITERATOR + 1
	ENDWHILE
ELSE
	PROGRAM_POSITION = 2
	;DETERMINE WHICH FILTERS NEED TO BE ACTUATED {
	FILTER_BANK_0_DIFF = FILTER_BANK_0_STATUS ^ FILTER_BANK_0_DEMAND
	FILTER_BANK_1_DIFF = FILTER_BANK_1_STATUS ^ FILTER_BANK_1_DEMAND
	FILTER_BANK_2_DIFF = FILTER_BANK_2_STATUS ^ FILTER_BANK_2_DEMAND
	FILTER_BANK_3_DIFF = FILTER_BANK_3_STATUS ^ FILTER_BANK_3_DEMAND
	FILTER_BANK_4_DIFF = FILTER_BANK_4_STATUS ^ FILTER_BANK_4_DEMAND
	FILTER_BANK_5_DIFF = FILTER_BANK_5_STATUS ^ FILTER_BANK_5_DEMAND
	FILTER_BANK_6_DIFF = FILTER_BANK_6_STATUS ^ FILTER_BANK_6_DEMAND
	FILTER_BANK_7_DIFF = FILTER_BANK_7_STATUS ^ FILTER_BANK_7_DEMAND
	;}
ENDIF
RUNNING = 0
TIMEOUT = 0
PROGRAM_POSITION = 3
;DON'T ALLOW ANYTHING IF THE STATUS IS CORRUPT
IF(CORRUPT = 1) AND (RESET_IN_PROGRESS = 0)
	PROGRAM_POSITION = 4
	DISABLE PLC PLC_NO
ENDIF
 


;DETERMINES LEAST AND MOST SIG BANKS AND FILTERS, BANKS0-7, FILTERS 0-127 {
;DETERMINES MOST SIGNIFICANT FILTER AND BANK {
ITERATOR = 7
WHILE(FILTER_BANK_DIFF_ITER = 0) AND (ITERATOR > 0 )
	ITERATOR = ITERATOR - 1
ENDWHILE
MOST_SIGNIFICANT_BANK = ITERATOR

PROGRAM_POSITION = 5

MOST_SIGNIFICANT_FILTER = 15
FILTER_BANK_DIFF_STORE = FILTER_BANK_DIFF_ITER
WHILE((FILTER_BANK_DIFF_STORE - MOST_SIGNIFICANT_FILTER_DEC) < 0) AND (MOST_SIGNIFICANT_FILTER > -1)
	MOST_SIGNIFICANT_FILTER = MOST_SIGNIFICANT_FILTER - 1
ENDWHILE
MOST_SIGNIFICANT_FILTER = MOST_SIGNIFICANT_FILTER +(MOST_SIGNIFICANT_BANK*16)
;}
PROGRAM_POSITION = 6

;DETERMINES LEAST SIGNIFICANT FILTER AND BANK {
ITERATOR = 0
WHILE(FILTER_BANK_DIFF_ITER = 0) AND (ITERATOR < 7 )
	ITERATOR = ITERATOR + 1
ENDWHILE
LEAST_SIGNIFICANT_BANK = ITERATOR

PROGRAM_POSITION = 7

LEAST_SIGNIFICANT_FILTER = 0
FILTER_BANK_DIFF_STORE = FILTER_BANK_DIFF_ITER
WHILE((FILTER_BANK_DIFF_STORE & LEAST_SIGNIFICANT_FILTER_DEC) = 0) AND (LEAST_SIGNIFICANT_FILTER < 16)
	LEAST_SIGNIFICANT_FILTER = LEAST_SIGNIFICANT_FILTER + 1
ENDWHILE
LEAST_SIGNIFICANT_FILTER = LEAST_SIGNIFICANT_FILTER +(LEAST_SIGNIFICANT_BANK*16)
;}
;}
PROGRAM_POSITION = 8

;DETERMINES THE NUMBER OF ACTUATIONS REQUIRED {
ITERATOR = 0
INDEX = 15
NO_OF_ACTUATIONS = 0
WHILE(ITERATOR < 8)
	INDEX = 15
	WHILE(INDEX > -1)
		IF(FILTER_BANK_DIFF_ITER & INDEX_DEC = INDEX_DEC)
			NO_OF_ACTUATIONS = NO_OF_ACTUATIONS +1
		ENDIF
		INDEX = INDEX -1
	ENDWHILE
	ITERATOR = ITERATOR +1
ENDWHILE ;}

PROGRAM_POSITION = 9

;DETERMINES THE CENTER OF ACTUATIONS REQUIRED {
;ITERATES THROUGH EACH BANK, 0-7. 
;ITERATES THROUGH EACH FILTER IN THE CURRENT BANK AND CHECKS IF
;THAT FILTER NEEDS CHANGING (IS IN THE DIFF WORD). IF IT DOES IT 
;INCREMENTS THE COUNTER "ACTUATOR_TARGET" UNTIL THAT COUNTER IS HALF
;THE TOTAL NUMBER OF ACTUATIONS REQUIRED. CENTER_OF_ACTUATIONS IS
;INCREMENTED AT EACH STEP SO ONCE THE CENTER HAS BEEN FOUND IT IS
;REFLECTED IN "CENTER_OF_ACTUATIONS"
ACTUATOR = 1
ACTUATOR_TARGET = 0
ITERATOR = 0
CENTER_OF_ACTUATIONS = 0
;FOR EVERY BANK...
WHILE(ITERATOR < 8)
	INDEX = 0
	WHILE(INDEX < 16) AND (ACTUATOR_TARGET < INT(NO_OF_ACTUATIONS/2))
		CENTER_OF_ACTUATIONS = CENTER_OF_ACTUATIONS + 1
		IF(FILTER_BANK_DIFF_ITER & INDEX_DEC = INDEX_DEC)
			ACTUATOR_TARGET = ACTUATOR_TARGET + 1
		ENDIF
		INDEX = INDEX +1
	ENDWHILE
	ITERATOR = ITERATOR +1
ENDWHILE ;}

PROGRAM_POSITION = 10
;DETERMINE WHICH ALGORITHM IS REQUIRED {
ALGORITHM = 1 
;IF BOTH ACTUATORS ARE HIGHER THAN THE WORK REQUIRED CHOOSE ALGORITHM 2 {
IF(ACTUATOR_A_POS > MOST_SIGNIFICANT_FILTER) 
	ALGORITHM = 2
	ALGORITHM_DETAIL = 1
ENDIF
;IF BOTH ACTUATORS ARE LOWER THAN THE WORK REQUIRED CHOOSE ALGORITHM 2
IF(ACTUATOR_B_POS < LEAST_SIGNIFICANT_FILTER)
	ALGORITHM = 2
	ALGORITHM_DETAIL = 2
ENDIF ;}
;ENDIF
PROGRAM_POSITION = 11
;IF BOTH ACTUATORS ARE WITHIN THE BLOCK OF WORK REQURIED CHOOSE ALGORITHM 3 {
IF(ACTUATOR_A_POS > LEAST_SIGNIFICANT_FILTER) OR (ACTUATOR_A_POS = LEAST_SIGNIFICANT_FILTER) 
	IF(ACTUATOR_B_POS < MOST_SIGNIFICANT_FILTER) OR (ACTUATOR_B_POS = MOST_SIGNIFICANT_FILTER) 
		ALGORITHM_DETAIL = 0
		;IF ACT B IS NEARER THE END OF THE BLOCK OF WORK START AT THE END, ELSE START IN THE MIDDLE
		IF(ACTUATOR_B_POS > INT(((MOST_SIGNIFICANT_FILTER - CENTER_OF_ACTUATIONS)/2)+CENTER_OF_ACTUATIONS))
			ALGORITHM_DETAIL = ALGORITHM_DETAIL + 1
		ENDIF		
		;IF ACT A IS NEARER THE END OF THE BLOCK OF WORK START AT THE END, ELSE START IN THE MIDDLE
		IF(ACTUATOR_A_POS < INT(((CENTER_OF_ACTUATIONS - LEAST_SIGNIFICANT_FILTER)/2)+LEAST_SIGNIFICANT_FILTER))
			ALGORITHM_DETAIL = ALGORITHM_DETAIL + 2
		ENDIF
		ALGORITHM = 3
	ENDIF
ENDIF ;}
;ENDIF

PROGRAM_POSITION = 12

;IF ACTUATOR A IS WITHIN THE BLOCK OF WORK REQUIRED BUT ACTUATOR B IS NOT, CHOOSE ALGORITHM 4 {
IF(ACTUATOR_A_POS > LEAST_SIGNIFICANT_FILTER-1) AND (ACTUATOR_A_POS < MOST_SIGNIFICANT_FILTER +1)
	IF(ACTUATOR_B_POS > MOST_SIGNIFICANT_FILTER)
		ALGORITHM = 4
		;IF ACT A IS NEARER THE END OF THE BLOCK OF WORK START AT THE END, ELSE START IN THE MIDDLE
		IF(ACTUATOR_A_POS < INT(((CENTER_OF_ACTUATIONS - LEAST_SIGNIFICANT_FILTER)/2)+LEAST_SIGNIFICANT_FILTER))
			ALGORITHM_DETAIL = 1
		ELSE
			ALGORITHM_DETAIL = 0
		ENDIF
	ENDIF
ELSE
	;IF ACTUATOR B IS WITHIN THE BLOCK OF WORK REQUIRED BUT ACTUATOR A IS NOT, CHOOSE ALGORITHM 4, OPTION 2
	IF(ACTUATOR_B_POS > LEAST_SIGNIFICANT_FILTER-1) AND (ACTUATOR_B_POS < MOST_SIGNIFICANT_FILTER +1)
		IF(ACTUATOR_A_POS < LEAST_SIGNIFICANT_FILTER)
			ALGORITHM = 4
			;IF ACT A IS NEARER THE END OF THE BLOCK OF WORK START AT THE END, ELSE START IN THE MIDDLE
			IF(ACTUATOR_B_POS > INT(((MOST_SIGNIFICANT_FILTER - CENTER_OF_ACTUATIONS)/2)+CENTER_OF_ACTUATIONS))
				ALGORITHM_DETAIL = 3
			ELSE
				ALGORITHM_DETAIL = 2
			ENDIF
		ENDIF
	ENDIF
ENDIF;}
;ENDIF
 ;}
PROGRAM_POSITION = 13
;IF EITHER ACTUATOR IS DISABLE JUST STICK TO THE OLD ALGORITHM
IF( ACTUATOR_A_DISABLED = 1) OR (ACTUATOR_B_DISABLED = 1)
	ALGORITHM = 1
ENDIF 

IF( ACTUATOR_A_DISABLED = 1) AND (ACTUATOR_B_DISABLED = 1)
	RUNNING = 0
	RUN_THIS_PLC = 0
ENDIF 

;SET THE RELEVANT STATUS BIT TO DISPLAY THE ALGORITH USED
STATUS = STATUS | ALGORITHM_DEC
PROGRAM_POSITION = 14
; INTIALISE VARIABLE {
RUNNING = 1
ACTUATOR = 0
WHILE(ACTUATOR < 2)
	ACTUATOR = ACTUATOR + 1
	IF(ACTUATOR_DISABLED = 0)
		ACTUATOR_FULLY_COMPLETED = 0
	ELSE
		ACTUATOR_FULLY_COMPLETED = 1
	ENDIF
ENDWHILE
PROGRAM_POSITION = 15
;}

;SETUP DIRECITON AND STARTING POINTS DEPENDING ON ALGORITHM {
;IF(ALGORITHM = 1) ; {
IF(ALGORITHM = 1)
	ACTUATOR = 1
	IF(ACTUATOR_DISABLED = 1)
		ACTUATOR_TARGET = -1
	ELSE
		ACTUATOR_TARGET = LEAST_SIGNIFICANT_FILTER
	ENDIF
	ACTUATOR_PROGRESSOR = 1
	;IF ONLY 1 FILTER NEEDS CHANGING LET ACTUATOR B DO IT 
	IF(LEAST_SIGNIFICANT_FILTER = MOST_SIGNIFICANT_FILTER)
		ACTUATOR_FULLY_COMPLETED = 1
	ENDIF

	ACTUATOR = 2
	IF(ACTUATOR_DISABLED = 1)
		ACTUATOR_TARGET = 128
	ELSE
		ACTUATOR_TARGET = MOST_SIGNIFICANT_FILTER
	ENDIF 
	ACTUATOR_PROGRESSOR = -1
ENDIF ;}
;ENDIF
PROGRAM_POSITION = 16
;IF(ALGORITHM = 2) ; {
IF(ALGORITHM = 2)
	IF(ALGORITHM_DETAIL = 1)
		ACTUATOR = 1
		;ACTUATOR_TARGET = ((INT(((MOST_SIGNIFICANT_FILTER - LEAST_SIGNIFICANT_FILTER)+1)/2))+LEAST_SIGNIFICANT_FILTER)-1
		ACTUATOR_TARGET = CENTER_OF_ACTUATIONS
		ACTUATOR_PROGRESSOR = -1
		
		ACTUATOR = 2
		ACTUATOR_TARGET = MOST_SIGNIFICANT_FILTER
		ACTUATOR_PROGRESSOR = -1
	ELSE
		ACTUATOR = 1
		ACTUATOR_TARGET = LEAST_SIGNIFICANT_FILTER
		ACTUATOR_PROGRESSOR = 1
		
		ACTUATOR = 2
		;ACTUATOR_TARGET = ((INT(((MOST_SIGNIFICANT_FILTER - LEAST_SIGNIFICANT_FILTER)+1)/2))+LEAST_SIGNIFICANT_FILTER)-1
		ACTUATOR_TARGET = CENTER_OF_ACTUATIONS
		ACTUATOR_PROGRESSOR = 1
	
	ENDIF
ENDIF ;}
;ENDIF
PROGRAM_POSITION = 17
;IF(ALGORITHM = 3) ; {
IF(ALGORITHM = 3)
	ACTUATOR = 1
	;ACTUATOR_TARGET = ((INT(((MOST_SIGNIFICANT_FILTER - LEAST_SIGNIFICANT_FILTER)+1)/2))+LEAST_SIGNIFICANT_FILTER)-1
	
	IF(ALGORITHM_DETAIL & 2 = 2)
		;START AT THE END AND WORK IN
		ACTUATOR_PROGRESSOR = 1
		ACTUATOR_TARGET = LEAST_SIGNIFICANT_FILTER
	ELSE
		;START AT THE CENTER AND WORK OUT
		ACTUATOR_PROGRESSOR = -1
		ACTUATOR_TARGET = CENTER_OF_ACTUATIONS - 1
	ENDIF
	
	ACTUATOR = 2
	ACTUATOR_TARGET = ACTUATOR_A_TARGET + 1
	IF(ALGORITHM_DETAIL & 1 = 1)
		;START AT THE END AND WORK IN
		ACTUATOR_PROGRESSOR = -1
		ACTUATOR_TARGET = MOST_SIGNIFICANT_FILTER
	ELSE
		;START AT THE CENTER AND WORK OUT
		ACTUATOR_PROGRESSOR = 1
		ACTUATOR_TARGET = CENTER_OF_ACTUATIONS
		
	ENDIF
ENDIF ;}
;ENDIF
PROGRAM_POSITION = 18
;IF(ALGORITHM = 4) ; {
IF(ALGORITHM = 4)
	;IF ACT A IS IN WORK AREA
	IF(ALGORITHM_DETAIL & 2 = 0)
		;IF ACT A IS NEAR CENTER
		IF(ALGORITHM_DETAIL & 1 = 0)
			ACTUATOR = 1 
			ACTUATOR_TARGET = CENTER_OF_ACTUATIONS - 1
			ACTUATOR_PROGRESSOR = -1
			
			ACTUATOR = 2
			ACTUATOR_TARGET = MOST_SIGNIFICANT_FILTER
			ACTUATOR_PROGRESSOR = -1
		ELSE
		;IF ACT A IS NEAR END
			ACTUATOR = 1 
			ACTUATOR_TARGET = LEAST_SIGNIFICANT_FILTER
			ACTUATOR_PROGRESSOR = 1
			
			ACTUATOR = 2
			ACTUATOR_TARGET = MOST_SIGNIFICANT_FILTER
			ACTUATOR_PROGRESSOR = -1
		ENDIF
	ELSE
	;IF ACT B IS IN WORK AREA
		;IF ACT B IS NEAR CENTER
		IF(ALGORITHM_DETAIL & 1 = 0)
			ACTUATOR = 1 
			ACTUATOR_TARGET = LEAST_SIGNIFICANT_FILTER
			ACTUATOR_PROGRESSOR = 1
			
			ACTUATOR = 2
			ACTUATOR_TARGET = CENTER_OF_ACTUATIONS
			ACTUATOR_PROGRESSOR = 1
		ELSE
		;IF ACT B IS NEAR END
			ACTUATOR = 1 
			ACTUATOR_TARGET = LEAST_SIGNIFICANT_FILTER
			ACTUATOR_PROGRESSOR = 1
			
			ACTUATOR = 2
			ACTUATOR_TARGET = MOST_SIGNIFICANT_FILTER
			ACTUATOR_PROGRESSOR = -1
		ENDIF
	ENDIF
ENDIF ;}
;ENDIF
PROGRAM_POSITION = 19
;}

FILTER_BANK_0_IN_PROG = 0
FILTER_BANK_1_IN_PROG = 0
FILTER_BANK_2_IN_PROG = 0
FILTER_BANK_3_IN_PROG = 0
FILTER_BANK_4_IN_PROG = 0
FILTER_BANK_5_IN_PROG = 0
FILTER_BANK_6_IN_PROG = 0
FILTER_BANK_7_IN_PROG = 0

;IF NOTHING NEEDS CHANGING BREAK OUT {
IF(MOST_SIGNIFICANT_FILTER = -1)OR(LEAST_SIGNIFICANT_FILTER = 128)
	RUNNING = 0
ENDIF;}
PROGRAM_POSITION = 20

WHILE (RUNNING = 1)
	; TOGGLE ACTUATOR NUMBER 
	IF(ACTUATOR = 1)
		ACTUATOR = 2
	ELSE
		ACTUATOR = 1
	ENDIF
	IF(ALGORITHM = 0)
		RUNNING = 0
	ENDIF
	IF(ACTUATOR_FULLY_COMPLETED = 0)
		PROGRAM_POSITION = 21
		IF((CURRENT_FILTER_BANK_IN_PROG & ACTUATOR_TARGET_DEC) = 0) 		;IF TARGET IS NOT IN PROGRESS
			AND (CURRENT_FILTER_BANK_DIFF & ACTUATOR_TARGET_DEC = ACTUATOR_TARGET_DEC)
			PROGRAM_POSITION = 22
			;COMMAND ACTUATOR AND SET IN PROGRESS 
			IF(RESET_IN_PROGRESS = 1)
				PROGRAM_POSITION = 23
				ACTUATOR_TAGET_STATE = 0
			ELSE
				PROGRAM_POSITION = 24
				ACTUATOR_TAGET_STATE = (CURRENT_FILTER_BANK_DEMAND & ACTUATOR_TARGET_DEC)/ACTUATOR_TARGET_DEC	;SET THE REQUIRED STATE
			ENDIF
			PROGRAM_POSITION = 25
			RUN_ACTUATOR_PLC = 0	;EQUIVIENT OF ENA PLC ACTUATOR_PLC_NO
			ACTUATIONS_DURING_RESET = ACTUATIONS_DURING_RESET + RESET_IN_PROGRESS
			;ACTUATOR PLC TRIGGERED (*ACTUATOR IS A BITSHIFT TO MAKE THE CODE SHORT)
			STATUS = STATUS | ACT1_PLC_TRIGGERED_SBIT * ACTUATOR
			ACTUATOR_PLC_DONE = 0
			CURRENT_FILTER_BANK_IN_PROG = CURRENT_FILTER_BANK_IN_PROG + ACTUATOR_TARGET_DEC 
			PROGRAM_POSITION = 26
		ENDIF
		IF(ACTUATOR_PLC_DONE = 1)
			PROGRAM_POSITION = 27
			STATUS = STATUS ^ ACT1_PLC_TRIGGERED_SBIT * ACTUATOR
			ACTUATOR_TARGET = ACTUATOR_TARGET + ACTUATOR_PROGRESSOR
			IF(ACTUATOR_A_TARGET = ACTUATOR_B_TARGET) OR (ACTUATOR_A_TARGET > ACTUATOR_B_TARGET) OR (ACTUATOR_TARGET < LEAST_SIGNIFICANT_FILTER) OR (ACTUATOR_TARGET > MOST_SIGNIFICANT_FILTER )
					PROGRAM_POSITION = 28
					ACTUATOR_FULLY_COMPLETED = 1
					;UPDATE THE STATUS
					STATUS = STATUS | ACT1_COMP_SBIT * ACTUATOR
			ENDIF
			PROGRAM_POSITION = 29
			IN_PROGRESS = CURRENT_FILTER_BANK_IN_PROG & ACTUATOR_TARGET_DEC
			ACTUATION_REQUIRED = CURRENT_FILTER_BANK_DIFF & ACTUATOR_TARGET_DEC
			;WHILE IN PROGRESS OR NOT REQUIRED
			WHILE(IN_PROGRESS = ACTUATOR_TARGET_DEC OR ACTUATION_REQUIRED = 0) AND (ACTUATOR_FULLY_COMPLETED = 0)
				ACTUATOR_TARGET = ACTUATOR_TARGET + ACTUATOR_PROGRESSOR
				IF(ACTUATOR_A_TARGET = ACTUATOR_B_TARGET) OR (ACTUATOR_A_TARGET > ACTUATOR_B_TARGET) OR (ACTUATOR_TARGET < LEAST_SIGNIFICANT_FILTER) OR (ACTUATOR_TARGET > MOST_SIGNIFICANT_FILTER )
					PROGRAM_POSITION = 30
					ACTUATOR_FULLY_COMPLETED = 1
					;UPDATE THE STATUS
					STATUS = STATUS | ACT1_COMP_SBIT * ACTUATOR
				ENDIF
					PROGRAM_POSITION = 31
				IN_PROGRESS = CURRENT_FILTER_BANK_IN_PROG & ACTUATOR_TARGET_DEC
				ACTUATION_REQUIRED = CURRENT_FILTER_BANK_DIFF & ACTUATOR_TARGET_DEC
			ENDWHILE
		ENDIF
	ENDIF
	PROGRAM_POSITION = 31
	IF(ACTUATOR_PLC_TIMED_OUT = 1)
		PROGRAM_POSITION = 33
		RUNNING = 0
		CORRUPT = 1
		TIMEOUT = 1
	ENDIF
	PROGRAM_POSITION = 34
	IF(ACTUATOR_A_COMPLETED = 1) AND (ACTUATOR_B_COMPLETED = 1)
		PROGRAM_POSITION = 35
		RUNNING = 0
	ENDIF
	
	
ENDWHILE

IF(RESET_IN_PROGRESS = 1) AND (TIMEOUT = 0)
	PROGRAM_POSITION = 35
	;Check all filters have been actuated during the reset procedure. If they haven't maintain the corrupt bit.
	IF(ACTUATIONS_DURING_RESET = 128)
		CORRUPT = 0
	ENDIF
	STATUS = STATUS ^ RESET_IN_PROG_SBIT
ENDIF
PROGRAM_POSITION = 36
RESET_IN_PROGRESS = 0
STATUS = STATUS | DONE_SBIT

;Reset diff status and in progress {
FILTER_BANK_0_DIFF = FILTER_BANK_0_STATUS ^ FILTER_BANK_0_DEMAND
FILTER_BANK_1_DIFF = FILTER_BANK_1_STATUS ^ FILTER_BANK_1_DEMAND
FILTER_BANK_2_DIFF = FILTER_BANK_2_STATUS ^ FILTER_BANK_2_DEMAND
FILTER_BANK_3_DIFF = FILTER_BANK_3_STATUS ^ FILTER_BANK_3_DEMAND
FILTER_BANK_4_DIFF = FILTER_BANK_4_STATUS ^ FILTER_BANK_4_DEMAND
FILTER_BANK_5_DIFF = FILTER_BANK_5_STATUS ^ FILTER_BANK_5_DEMAND
FILTER_BANK_6_DIFF = FILTER_BANK_6_STATUS ^ FILTER_BANK_6_DEMAND
FILTER_BANK_7_DIFF = FILTER_BANK_7_STATUS ^ FILTER_BANK_7_DEMAND

FILTER_BANK_0_IN_PROG = 0
FILTER_BANK_1_IN_PROG = 0
FILTER_BANK_2_IN_PROG = 0
FILTER_BANK_3_IN_PROG = 0
FILTER_BANK_4_IN_PROG = 0
FILTER_BANK_5_IN_PROG = 0
FILTER_BANK_6_IN_PROG = 0
FILTER_BANK_7_IN_PROG = 0

;}

DISABLE PLC PLC_NO
CLOSE
