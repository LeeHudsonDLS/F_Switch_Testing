;####################################################
; DO NOT MODIFY: File created from src/PLC23_actuator_b.psub
;####################################################



;ACTUATOR A PLC
;Description:
;This PLC controls actuator A. It takes a demand filter number (0-127) and a demand state (0-1). This PLC
;takes care of moving the translation to the correct filter and actuating the rocker. It also makes requests 
;to the sentinel PLC once it has completed an actuation. 
;
;INPUTS:	DEMANDPOS	 -	The target for actuator A 0-127		P(100*(PLC_NO) + 2)
;			DEMANDSTATE -	The desired state of actuator A		P(100*(PLC_NO) + 3)
;

;Assumptions and conventions:
;Filters	0-127
;Banks		0-7
;In Beam = 1
;Out beam = 0
;When homed 0 = first filter

; Macros (and example values):
; - ACTUATOR_PLC_NO 	= 23 PLC Number for this PLC. Must match the definition in the main PLC
; - MAIN_PLC_NO 	= 20  PLC Number for the main PLC, e.g 20
; - SENTINEL_PLC_NO 	= 21  PLC Number for the senitnel PLC, e.g 21
; - TRANS 	= 7  Axis number for the translation axis
; - ROCKER 	= 8  Axis number for the rocker axis
; - ACTUATOR 	= 2  1 for actuator A, 2 for actuator B
; - DWELL	=50 Actuation dwell time in ms e.g 800
; - FIN_POS =-541 Filter in position e.g -541
; - FOUT_POS	=547 Filter out position e.g 547

CLOSE
DELETE GATHER
DELETE TRACE

#DEFINE PLC_NO	23
#DEFINE MAIN_PLC_NO	20
#DEFINE SENTINEL_PLC_NO 21

#DEFINE TRANSLATION	7
#DEFINE ROCKER	8

;Pvariables used to talk to the sentinel PLC
#DEFINE STATUS_BIT_REQUEST_ADDRESS	12
#DEFINE STATUS_BIT_STATE_ADDRESS	22

#DEFINE ROCKER_JOG_PRESET_VARIABLE M(100*ROCKER + 72)
#DEFINE ROCKER_IN_POSITION M(100*ROCKER + 40)
#DEFINE ROCKER_HOME M(100*ROCKER + 20)
#DEFINE ROCKER_HOMED	M(100*ROCKER + 45)
#DEFINE ROCKER_FFE	M(100*ROCKER + 42)

#DEFINE TRANSLATION_JOG_PRESET_VARIABLE M(100*TRANSLATION + 72)
#DEFINE TRANSLATION_IN_POSITION M(100*TRANSLATION + 40)
#DEFINE TRANSLATION_HOME M(100*TRANSLATION + 20)
#DEFINE TRANSLATION_HOMED	M(100*TRANSLATION + 45)
#DEFINE TRANSLATION_FFE	M(100*TRANSLATION + 42)
#DEFINE TRANSLATION_RAW_POSITION M(100*TRANSLATION + 62)
#DEFINE TRANSLATION_SCALE_FACTOR I(100*TRANSLATION + 8)
#DEFINE TRANSLATION_SCALED_POSITION TRANSLATION_RAW_POSITION/(TRANSLATION_SCALE_FACTOR*32)

#DEFINE DONE			P(100*PLC_NO +1)
#DEFINE DEMANDPOS		P(100*PLC_NO +2)
#DEFINE DEMANDSTATE		P(100*PLC_NO +3)
#DEFINE CURRENTPOS		P(100*PLC_NO +4)

;Expected by epics
#DEFINE RUNNING			P(100*PLC_NO +10)	;-1 = timed out, 0 = not running, 1 = running 
#DEFINE TIMEOUT			P(100*PLC_NO +11)	;0-1 timeout 
#DEFINE STATUS			P(100*PLC_NO +12)	;PLC Status
#DEFINE OVERDRIVE		P(100*PLC_NO +15)	;May no be required
#DEFINE TIMEOUT_STAT	P(100*PLC_NO +17)	;timeout status/detail

#DEFINE FILTER_OUT_POSITION P(100*PLC_NO +18)
#DEFINE TIMED_OUT		P(100*PLC_NO +19)
#DEFINE TIMED_OUT_STATUS	P(100*PLC_NO +20)


#DEFINE SENTINEL_PLC_NOT_RUNNING M(5000 + SENTINEL_PLC_NO)



;#DEFINE STATUS_BIT_REQUEST	P(100*SENTINEL_PLC_NO + PLC_NO)
#DEFINE STATUS_BIT_REQUEST	P(100*SENTINEL_PLC_NO + STATUS_BIT_REQUEST_ADDRESS)
#DEFINE STATUS_BIT_STATE_REQUEST	P(100*SENTINEL_PLC_NO + STATUS_BIT_STATE_ADDRESS)

;TIMER
#DEFINE TIMER I(5111+(PLC_NO&30)*50+PLC_NO%2)
#DEFINE MILLISECONDS	* 8388608/i10
#DEFINE ROCKER_DWELL_TIME 50
#DEFINE OPEN_LOOP_TIMEOUT	4000

#DEFINE JOG_AXIS_POS	&COMMAND"J+"
#DEFINE JOG_AXIS_NEG	&COMMAND"J-"
#DEFINE STOP_AXIS	&COMMAND"J/"
#DEFINE JOG_PRESET	&COMMAND"J^*"
#DEFINE KILL_AXIS	&COMMAND"K"
#DEFINE JOG_TO_PRESET	&COMMAND"J=*"
#DEFINE HOME_AXIS	&COMMAND"HM"
#DEFINE JOG_TO_TRIGGER_POS	&COMMAND"J^2400^0"
#DEFINE JOG_TO_TRIGGER_NEG	&COMMAND"J:-2400^0"
#DEFINE POSITIVE_OPEN_LOOP_MOVE	&COMMAND"o0.5"
#DEFINE NEGATIVE_OPEN_LOOP_MOVE	&COMMAND"o-0.5"

#DEFINE RUNNING_SBIT					1
#DEFINE HOME_TRIGGERED_SBIT				2
#DEFINE JOGGING_TRANS_SBIT				4
#DEFINE FILTER_OUT_STARTED_SBIT			8
#DEFINE FILTER_IN_STARTED_SBIT			16
#DEFINE ROCKER_ACTUATING_FILTER_SBIT	32
#DEFINE ROCKER_ACTUATION_DWELL_SBIT		64
#DEFINE ROCKER_RETRACTING_SBIT			128
#DEFINE NEG_OPEN_LOOP_MOVE_SBIT			256
#DEFINE POS_OPEN_LOOP_MOVE_SBIT			512
#DEFINE OPEN_LOOP_FAILED_SBIT			1024
#DEFINE ROCKER_FFE_ACTUATING_SBIT		2048	
#DEFINE ROCKER_FFE_RETURNING_SBIT		4096
#DEFINE TRANSLATION_FFE_SBIT			8192
#DEFINE INVALID_ACTUATION_SBIT			16384
#DEFINE DONE_SBIT						32768

#DEFINE FILTER_INCREMENT	1000
#DEFINE FILTER_OUT_POSITION P(100*PLC_NO +30)
#DEFINE FILTER_IN_POSITION P(100*PLC_NO +31)
#DEFINE FILTER_ACTUATION_POSITION P(100*PLC_NO + 30 + DEMANDSTATE)
FILTER_OUT_POSITION = 547
FILTER_IN_POSITION = -541


OPEN PLC PLC_NO
CLEAR
RUNNING = 1
STATUS = RUNNING_SBIT

DONE = 0
TIMEOUT = 0
TIMEOUT_STAT = 0
TIMED_OUT = 0
TIMED_OUT_STATUS = 0

;Home if not homed
IF(ROCKER_HOMED = 0) OR (TRANSLATION_HOMED = 0)
	STATUS = HOME_TRIGGERED_SBIT
ENDIF

STATUS = RUNNING_SBIT
;Move to target position {
TRANSLATION_JOG_PRESET_VARIABLE = DEMANDPOS * FILTER_INCREMENT
ADDRESS#TRANSLATION
JOG_TO_PRESET
STATUS = STATUS | JOGGING_TRANS_SBIT

WHILE(TRANSLATION_IN_POSITION = 1)
ENDWHILE
WHILE(TRANSLATION_IN_POSITION = 0) AND (TRANSLATION_FFE = 0)
	;UPDATE POSITION READBACK
	IF(TRANSLATION_SCALED_POSITION < FILTER_INCREMENT)
		CURRENTPOS = 0
	ELSE
		CURRENTPOS = INT((TRANSLATION_SCALED_POSITION+500)/FILTER_INCREMENT)
	ENDIF
ENDWHILE

STATUS = STATUS ^ JOGGING_TRANS_SBIT

IF(TRANSLATION_FFE = 1)
	TIMEOUT = 1
	TIMEOUT_STAT = 1
	RUNNING = -1
	STATUS = STATUS | TRANSLATION_FFE_SBIT
ENDIF

;UPDATE POSITION READBACK
IF(TRANSLATION_SCALED_POSITION < FILTER_INCREMENT)
	CURRENTPOS = 0
ELSE
	CURRENTPOS = INT((TRANSLATION_SCALED_POSITION+500)/FILTER_INCREMENT)
ENDIF
; }

;Make sure sentinel is running {
IF(SENTINEL_PLC_NOT_RUNNING = 1)
	ENABLE PLC SENTINEL_PLC_NO
	TIMER = 50 MILLISECONDS
	WHILE(TIMER > 0)
	ENDWHILE
ENDIF
; }

;DEMANDSTATE = 0 IS FIRE OUT, 1 IS IN
IF(DEMANDSTATE = 0)
	STATUS = STATUS | FILTER_OUT_STARTED_SBIT
ELSE
	STATUS = STATUS | FILTER_IN_STARTED_SBIT
ENDIF

ROCKER_JOG_PRESET_VARIABLE = FILTER_ACTUATION_POSITION
;JOG AXIS TO PREDEFINED POSITION
ADDRESS#ROCKER
JOG_TO_PRESET				
WHILE(ROCKER_IN_POSITION = 1)
ENDWHILE

STATUS = STATUS | ROCKER_ACTUATING_FILTER_SBIT

WHILE(ROCKER_IN_POSITION = 0)AND(ROCKER_FFE = 0)
ENDWHILE

IF(ROCKER_FFE = 1)
	TIMED_OUT = 1
	TIMED_OUT_STATUS = 1
	STATUS = STATUS ^ ROCKER_ACTUATING_FILTER_SBIT
	STATUS = STATUS | ROCKER_FFE_ACTUATING_SBIT
ENDIF

IF(TIMED_OUT = 0)
	;DWELL
	TIMER = ROCKER_DWELL_TIME MILLISECONDS	
	STATUS = STATUS | ROCKER_ACTUATION_DWELL_SBIT
	WHILE(TIMER > 0)
	ENDWHILE
	STATUS = STATUS ^ ROCKER_ACTUATION_DWELL_SBIT
ELSE
	;IF THE AXIS DID TIME OUT IT PROBABLY HAS BECOME DISENGAED AND WILL REQUIRE AN OPEN LOOP MOVE
	ADDRESS#ROCKER
	KILL_AXIS
	TIMER = 10 MILLISECONDS				
	WHILE(TIMER > 0)
	ENDWHILE
	ADDRESS#ROCKER
	IF(DEMANDSTATE = 0)
		NEGATIVE_OPEN_LOOP_MOVE
		STATUS = STATUS | NEG_OPEN_LOOP_MOVE_SBIT
	ELSE
		POSITIVE_OPEN_LOOP_MOVE
		STATUS = STATUS | POS_OPEN_LOOP_MOVE_SBIT
	ENDIF
	
	TIMER = OPEN_LOOP_TIMEOUT MILLISECONDS
	WHILE(ROCKER_HOME = 0)AND(TIMER > 0)
	ENDWHILE
	
	IF(DEMANDSTATE = 0)
		STATUS = STATUS ^ NEG_OPEN_LOOP_MOVE_SBIT
	ELSE
		STATUS = STATUS ^ POS_OPEN_LOOP_MOVE_SBIT
	ENDIF
	
	ADDRESS#ROCKER
	KILL_AXIS
	
	IF(TIMER < 0)OR(TIMER = 0)
		TIMED_OUT_STATUS = 2
		STATUS = STATUS | OPEN_LOOP_FAILED_SBIT
	ENDIF

ENDIF

IF(TIMED_OUT_STATUS < 2)
	;JOG POSITIVE UNTIL ROCKER IS IN ITS HOME POSITION AND TRANSLATION IS FREE TO MOVE
	STATUS = STATUS | ROCKER_RETRACTING_SBIT
	ROCKER_JOG_PRESET_VARIABLE = 0
	ADDRESS#ROCKER
	JOG_TO_PRESET		
	
	WHILE(ROCKER_IN_POSITION = 1)
	ENDWHILE

						
	WHILE(ROCKER_IN_POSITION = 0)AND(ROCKER_FFE = 0)
	ENDWHILE
	STATUS = STATUS ^ ROCKER_RETRACTING_SBIT
	
	IF(ROCKER_FFE = 1)
		TIMED_OUT = 1
		TIMED_OUT_STATUS = 3
		STATUS = STATUS | ROCKER_FFE_RETURNING_SBIT
	ENDIF
		
	TIMER = 10 MILLISECONDS				
	WHILE(TIMER > 0)
	ENDWHILE
										
	TIMER = 50 MILLISECONDS				
	WHILE(TIMER > 0)
	ENDWHILE
ENDIF



;Request status update to sentinel {
IF(TIMED_OUT = 0)
	STATUS_BIT_REQUEST = DEMANDPOS
	STATUS_BIT_STATE_REQUEST = DEMANDSTATE
	STATUS = DONE_SBIT
	WHILE(STATUS_BIT_REQUEST > -1) OR (STATUS_BIT_STATE_REQUEST > -1)
	ENDWHILE
ELSE
	STATUS = STATUS | INVALID_ACTUATION_SBIT
	TIMEOUT = 1
	RUNNING = -1
	IF(TIMED_OUT = 1)
		TIMEOUT_STAT = 2
	ELSE
		TIMEOUT_STAT = 3
	ENDIF
ENDIF
; }


DONE = 1

RUNNING = 0
DISABLE PLC PLC_NO
CLOSE
